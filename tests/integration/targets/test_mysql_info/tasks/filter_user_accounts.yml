---

- module_defaults:
    community.mysql.mysql_db: &mysql_defaults
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
      login_host: "{{ mysql_host }}"
      login_port: "{{ mysql_primary_port }}"
    community.mysql.mysql_query: *mysql_defaults
    community.mysql.mysql_info: *mysql_defaults
    community.mysql.mysql_user: *mysql_defaults

  block:

    # ================================ Prepare ==============================
    - name: Mysql_info user_accounts | Create databases
      community.mysql.mysql_db:
        name:
          - user_accounts_db
          - user_accounts_db2
          - user_accounts_db3
        state: present

    - name: Mysql_info user_accounts | Create tables
      community.mysql.mysql_query:
        query:
          - >-
            CREATE TABLE IF NOT EXISTS user_accounts_db.t1
            (id int, name varchar(9))
          - >-
            CREATE TABLE IF NOT EXISTS user_accounts_db.T_UPPER
            (id int, name1 varchar(9), NAME2 varchar(9), Name3 varchar(9))

    # I failed to create a procedure using community.mysql.mysql_query.
    # Maybe it's because we must changed the delimiter.
    - name: Mysql_info user_accounts | Create procedure SQL file
      ansible.builtin.template:
        src: files/user_accounts_create_procedure.sql
        dest: /root/create_procedure.sql
        owner: root
        group: root
        mode: '0700'

    - name: Mysql_info user_accounts | Create a procedure
      community.mysql.mysql_db:
        name: all
        state: import
        target: /root/create_procedure.sql

    # Use a query instead of mysql_user, because we want to caches differences
    # at the end and a bug in mysql_user would be invisible to this tests
    - name: Mysql_info user_accounts | Prepare common tests users
      community.mysql.mysql_query:
        query:
          - >-
            CREATE USER user_accounts_adm@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >
            GRANT ALL ON *.* to user_accounts_adm@'user_accounts.com' WITH GRANT
            OPTION

          - >-
            CREATE USER user_accounts_schema@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >-
            GRANT SELECT, INSERT, UPDATE, DELETE ON user_accounts_db.* TO
            user_accounts_schema@'user_accounts.com'

          - >-
            CREATE USER user_accounts_table@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >-
            GRANT SELECT, INSERT, UPDATE ON user_accounts_db.t1 TO
            user_accounts_table@'user_accounts.com'

          - >-
            CREATE USER user_accounts_col@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
            WITH MAX_USER_CONNECTIONS 100
          - >-
            GRANT SELECT (id) ON user_accounts_db.t1 TO
            user_accounts_col@'user_accounts.com'

          - >-
            CREATE USER user_accounts_proc@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
            WITH MAX_USER_CONNECTIONS 2 MAX_CONNECTIONS_PER_HOUR 60
          - >-
            GRANT EXECUTE ON PROCEDURE user_accounts_db.get_all_items TO
            user_accounts_proc@'user_accounts.com'

          - >-
            CREATE USER user_accounts_multi@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >-
            GRANT SELECT ON mysql.* TO
            user_accounts_multi@'user_accounts.com'
          - >-
            GRANT ALL ON user_accounts_db.* TO
            user_accounts_multi@'user_accounts.com'
          - >-
            GRANT ALL ON user_accounts_db2.* TO
            user_accounts_multi@'user_accounts.com'
          - >-
            GRANT ALL ON user_accounts_db3.* TO
            user_accounts_multi@'user_accounts.com'

          - >-
            CREATE USER user_accounts_usage_only@'user_accounts.com' IDENTIFIED WITH
            mysql_native_password AS '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >-
            GRANT USAGE ON *.* TO
            user_accounts_usage_only@'user_accounts.com'

          - >-
            CREATE USER user_accounts_columns_uppercase@'user_accounts.com'
            IDENTIFIED WITH mysql_native_password AS
            '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >-
            GRANT SELECT,UPDATE(name1,NAME2,Name3) ON user_accounts_db.T_UPPER TO
            user_accounts_columns_uppercase@'user_accounts.com'

          - >-
            CREATE USER user_accounts_multi_hosts@'%'
            IDENTIFIED WITH mysql_native_password AS
            '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - GRANT SELECT ON user_accounts_db.* TO user_accounts_multi_hosts@'%'

          - >-
            CREATE USER user_accounts_multi_hosts@'localhost'
            IDENTIFIED WITH mysql_native_password AS
            '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - >-
            GRANT SELECT ON user_accounts_db.* TO
            user_accounts_multi_hosts@'localhost'

          - >-
            CREATE USER user_accounts_multi_hosts@'host1'
            IDENTIFIED WITH mysql_native_password AS
            '*6C387FC3893DBA1E3BA155E74754DA6682D04747'
          - GRANT SELECT ON user_accounts_db.* TO user_accounts_multi_hosts@'host1'

          # Different password than the others user_accounts_multi_hosts
          - >-
            CREATE USER user_accounts_multi_hosts@'host2'
            IDENTIFIED WITH mysql_native_password AS
            '*CB3326D5279DE7915FE5D743232165EE887883CA'
          - GRANT SELECT ON user_accounts_db.* TO user_accounts_multi_hosts@'host2'

    - name: Mysql_info user_accounts | Prepare tests users for MariaDB
      community.mysql.mysql_user:
        name: "{{ item.name }}"
        host: "user_accounts.com"
        plugin: "{{ item.plugin | default(omit) }}"
        plugin_auth_string: "{{ item.plugin_auth_string | default(omit) }}"
        plugin_hash_string: "{{ item.plugin_hash_string | default(omit) }}"
        tls_require: "{{ item.tls_require | default(omit) }}"
        priv: "{{ item.priv }}"
        resource_limits: "{{ item.resource_limits | default(omit) }}"
        column_case_sensitive: true
        state: present
      loop:
        - name: user_accounts_socket  # Only for MariaDB
          priv:
            '*.*': 'ALL'
          plugin: 'unix_socket'
      when:
        - db_engine == 'mariadb'

    - name: Mysql_info user_accounts | Prepare tests users for MySQL
      community.mysql.mysql_user:
        name: "{{ item.name }}"
        host: "user_accounts.com"
        plugin: "{{ item.plugin | default(omit) }}"
        plugin_auth_string: "{{ item.plugin_auth_string | default(omit) }}"
        plugin_hash_string: "{{ item.plugin_hash_string | default(omit) }}"
        tls_require: "{{ item.tls_require | default(omit) }}"
        priv: "{{ item.priv }}"
        resource_limits: "{{ item.resource_limits | default(omit) }}"
        column_case_sensitive: true
        state: present
      loop:
        - name: user_accounts_sha256  # Only for MySQL
          priv:
            '*.*': 'ALL'
          plugin_auth_string:
            '$5$/<w*D`L4\"F$WQiI1Pev.7atAh8udYs3wqlzgdfV8LXoy7rqSEC7NF2'
          plugin: 'sha256_password'
      when:
        - db_engine == 'mysql'

    - name: Mysql_info user_accounts | Prepare tests users for MySQL 8+
      community.mysql.mysql_user:
        name: "{{ item.name }}"
        host: "user_accounts.com"
        plugin: "{{ item.plugin | default(omit) }}"
        plugin_auth_string: "{{ item.plugin_auth_string | default(omit) }}"
        plugin_hash_string: "{{ item.plugin_hash_string | default(omit) }}"
        tls_require: "{{ item.tls_require | default(omit) }}"
        priv: "{{ item.priv }}"
        resource_limits: "{{ item.resource_limits | default(omit) }}"
        column_case_sensitive: true
        state: present
      loop:
        - name: user_accounts_caching_sha2  # Only for MySQL 8+
          priv:
            '*.*': 'ALL'
          plugin_auth_string:
            '$A$005$61j/uF%Qb4-=O2xkeO82u2HNkF.lxDq0liO4U3xqi7bDUCbWM6HayRXWn1'
          plugin: 'caching_sha2_password'
      when:
        - db_engine == 'mysql'
        - db_version is version('8.0', '>=')

    # ================================== Tests ==============================

    - name: Mysql_info user_accounts | Collect user_accounts
      community.mysql.mysql_info:
        filter:
          - user_accounts
      register: result

    - name: Recreate users from mysql_info user_accounts result
      community.mysql.mysql_user:
        name: "{{ item.name }}"
        host: "{{ item.host }}"
        plugin: "{{ item.plugin | default(omit) }}"
        plugin_auth_string: "{{ item.plugin_auth_string | default(omit) }}"
        plugin_hash_string: "{{ item.plugin_hash_string | default(omit) }}"
        tls_require: "{{ item.tls_require | default(omit) }}"
        priv: "{{ item.priv | default(omit) }}"
        resource_limits: "{{ item.resource_limits | default(omit) }}"
        column_case_sensitive: true
        state: present
      loop: "{{ result.user_accounts }}"
      loop_control:
        label: "{{ item.name }}@{{ item.host }}"
      register: recreate_users_result
      failed_when:
        - recreate_users_result is changed
      when:
        - item.name != 'root'
        - item.name != 'mysql'
        - item.name != 'mariadb.sys'
        - item.name != 'mysql.sys'
        - item.name != 'mysql.infoschema'


    # ================================== Cleanup ============================

    - name: Mysql_info user_accounts | Cleanup user_accounts
      community.mysql.mysql_user:
        name: "{{ item }}"
        host_all: true
        column_case_sensitive: true
        state: absent
      loop:
        - user_accounts_adm
        - user_accounts_schema
        - user_accounts_table
        - user_accounts_col
        - user_accounts_proc
        - user_accounts_multi
        - user_accounts_db
        - user_accounts_usage_only
        - user_accounts_columns_uppercase
        - user_accounts_multi_hosts

    - name: Mysql_info user_accounts | Cleanup databases
      community.mysql.mysql_db:
        name:
          - user_accounts_db
          - user_accounts_db2
          - user_accounts_db3
        state: absent

    - name: Mysql_info user_accounts | Cleanup sql file for the procedure
      ansible.builtin.file:
        path: /root/create_procedure.sql
        state: absent
