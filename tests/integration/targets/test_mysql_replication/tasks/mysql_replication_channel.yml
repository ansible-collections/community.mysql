# Copyright: (c) 2019, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- vars:
    mysql_params: &mysql_params
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: 127.0.0.1

  block:
    # Get master log file and log pos:
    - name: Get master status
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_primary_port }}'
        mode: getmaster
      register: mysql_primary_status

    # Test changemaster mode:
    - name: Run replication with channel
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_replica2_port }}'
        mode: changemaster
        master_host: '{{ mysql_host }}'
        master_port: '{{ mysql_primary_port }}'
        master_user: '{{ replication_user }}'
        master_password: '{{ replication_pass }}'
        master_log_file: '{{ mysql_primary_status.File }}'
        master_log_pos: '{{ mysql_primary_status.Position }}'
        channel: '{{ test_channel }}'
      register: result

    - assert:
        that:
        - result is changed
        - result.queries == ["CHANGE MASTER TO MASTER_HOST='{{ mysql_host }}',MASTER_USER='{{ replication_user }}',MASTER_PASSWORD='********',MASTER_PORT={{ mysql_primary_port }},MASTER_LOG_FILE='{{ mysql_primary_status.File }}',MASTER_LOG_POS={{ mysql_primary_status.Position }} FOR CHANNEL '{{ test_channel }}'"]

    # Test startslave mode:
    - name: Start slave with channel
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_replica2_port }}'
        mode: startslave
        channel: '{{ test_channel }}'
      register: result

    - assert:
        that:
        - result is changed
        - result.queries == ["START SLAVE FOR CHANNEL '{{ test_channel }}'"]

    # Test getslave mode:
    - name: Get standby status with channel
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_replica2_port }}'
        mode: getslave
        channel: '{{ test_channel }}'
      register: slave_status

    - assert:
        that:
        - slave_status.Is_Slave == true
        - slave_status.Master_Host == '{{ mysql_host }}'
        - slave_status.Exec_Master_Log_Pos == mysql_primary_status.Position
        - slave_status.Master_Port == {{ mysql_primary_port }}
        - slave_status.Last_IO_Errno == 0
        - slave_status.Last_IO_Error == ''
        - slave_status.Channel_Name == '{{ test_channel }}'
        - slave_status is not changed

    # Test stopslave mode:
    - name: Stop slave with channel
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_replica2_port }}'
        mode: stopslave
        channel: '{{ test_channel }}'
      register: result

    - assert:
        that:
        - result is changed
        - result.queries == ["STOP SLAVE FOR CHANNEL '{{ test_channel }}'"]

    # Test reset
    - name: Reset slave with channel
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_replica2_port }}'
        mode: resetslave
        channel: '{{ test_channel }}'
      register: result

    - assert:
        that:
        - result is changed
        - result.queries == ["RESET SLAVE FOR CHANNEL '{{ test_channel }}'"]

    # Test reset all
    - name: Reset slave all with channel
      mysql_replication:
        <<: *mysql_params
        login_port: '{{ mysql_replica2_port }}'
        mode: resetslaveall
        channel: '{{ test_channel }}'
      register: result

    - assert:
        that:
        - result is changed
        - result.queries == ["RESET SLAVE ALL FOR CHANNEL '{{ test_channel }}'"]
