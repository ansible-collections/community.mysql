---
name: Plugins CI
on:  # yamllint disable-line rule:truthy
  push:
    paths:
      - 'plugins/**'
      - 'tests/**'
      - '.github/workflows/ansible-test-plugins.yml'
  pull_request:
    paths:
      - 'plugins/**'
      - 'tests/**'
      - '.github/workflows/ansible-test-plugins.yml'
  schedule:
    - cron: '0 6 * * *'


jobs:
  sanity:
    name: "Sanity (Ansible: ${{ matrix.ansible }})"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        ansible:
          - stable-2.15
          - stable-2.16
          - stable-2.17
          - devel
    steps:
      # https://github.com/ansible-community/ansible-test-gh-action
      - name: Perform sanity testing
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          testing-type: sanity
          pull-request-change-detection: true

  # Use this to chose which version of Python vs Ansible to test:
  # https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.html#ansible-core-control-node-python-support
  integration:
    name: "Integration (Python: ${{ matrix.python }}, Ansible: ${{ matrix.ansible }}, DB: ${{ matrix.db_engine_name }} ${{ matrix.db_engine_version }}, connector: ${{ matrix.connector_name }} ${{ matrix.connector_version }})"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.15
          - stable-2.16
          - stable-2.17
          - devel
        db_engine_name:
          - mysql
          - mariadb
        db_engine_version:
          - '8.0.38'
          # - '8.4.1'  # Unable to install mysql-client on Ubuntu 20.04 default container used by ansible-test
          - '10.4.34'
          - '10.5.25'
          - '10.6.18'
          - '10.11.8'
        python:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
        connector_name:
          - pymysql
          - mysqlclient
        connector_version:
          - '0.9.3'
          - '1.0.2'
          - '2.0.1'
          - '2.0.3'
          - '2.1.1'

        include:

          # RHEL8 context
          - connector_name: pymysql
            connector_version: '0.10.1'
            python: '3.6'
            ansible: stable-2.16

          # RHEL9 context
          - connector_name: pymysql
            connector_version: '1.1.1'
            python: '3.9'
            ansible: stable-2.17

        exclude:
          - db_engine_name: mysql
            db_engine_version: '10.4.34'

          - db_engine_name: mysql
            db_engine_version: '10.5.25'

          - db_engine_name: mysql
            db_engine_version: '10.6.18'

          - db_engine_name: mysql
            db_engine_version: '10.11.8'

          - db_engine_name: mariadb
            db_engine_version: '8.0.38'

          - db_engine_name: mariadb
            db_engine_version: '8.4.1'

          - connector_name: pymysql
            connector_version: '2.0.1'

          - connector_name: pymysql
            connector_version: '2.0.3'

          - connector_name: pymysql
            connector_version: '2.1.1'

          - connector_name: mysqlclient
            connector_version: '0.9.3'

          - connector_name: mysqlclient
            connector_version: '1.0.2'

          - db_engine_version: '8.4.1'
            python: '3.8'

          - db_engine_version: '10.4.34'
            python: '3.10'

          - db_engine_version: '10.4.34'
            python: '3.11'

          - db_engine_version: '10.4.34'
            python: '3.12'

          - db_engine_version: '10.4.34'
            ansible: devel

          - db_engine_version: '10.6.18'
            python: '3.8'

          - db_engine_version: '10.6.18'
            python: '3.9'

          - python: '3.8'
            connector_version: '1.0.2'

          - python: '3.8'
            connector_version: '2.0.3'

          - python: '3.8'
            connector_version: '2.1.1'

          - python: '3.9'
            connector_version: '1.0.2'

          - python: '3.9'
            connector_version: '2.0.1'

          - python: '3.9'
            connector_version: '2.1.1'

          - python: '3.10'
            connector_version: '0.9.3'

          - python: '3.10'
            connector_version: '2.0.1'

          - python: '3.10'
            connector_version: '2.0.3'

          - python: '3.11'
            connector_version: '0.9.3'

          - python: '3.11'
            connector_version: '1.0.2'

          - python: '3.11'
            connector_version: '2.0.1'

          - python: '3.11'
            connector_version: '2.0.3'

          - python: '3.12'
            connector_version: '0.9.3'

          - python: '3.12'
            connector_version: '1.0.2'

          - python: '3.12'
            connector_version: '2.0.1'

          - python: '3.12'
            connector_version: '2.0.3'

          - python: '3.8'
            ansible: stable-2.16

          - python: '3.8'
            ansible: stable-2.17

          - python: '3.8'
            ansible: devel

          - python: '3.9'
            ansible: stable-2.16

          - python: '3.9'
            ansible: stable-2.17

          - python: '3.9'
            ansible: devel

    services:
      db_primary:
        image: docker.io/library/${{ matrix.db_engine_name }}:${{ matrix.db_engine_version }}
        env:
          MARIADB_ROOT_PASSWORD: msandbox
          MYSQL_ROOT_PASSWORD: msandbox
        ports:
          - 3307:3306
        # We write our own health-cmd because the mariadb container does not
        # provide a healthcheck
        options: >-
          --health-cmd "mysqladmin ping -P 3306 -pmsandbox |grep alive || exit 1"
          --health-start-period 10s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 6

      db_replica1:
        image: docker.io/library/${{ matrix.db_engine_name }}:${{ matrix.db_engine_version }}
        env:
          MARIADB_ROOT_PASSWORD: msandbox
          MYSQL_ROOT_PASSWORD: msandbox
        ports:
          - 3308:3306
        options: >-
          --health-cmd "mysqladmin ping -P 3306 -pmsandbox |grep alive || exit 1"
          --health-start-period 10s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 6

      db_replica2:
        image: docker.io/library/${{ matrix.db_engine_name }}:${{ matrix.db_engine_version }}
        env:
          MARIADB_ROOT_PASSWORD: msandbox
          MYSQL_ROOT_PASSWORD: msandbox
        ports:
          - 3309:3306
        options: >-
          --health-cmd "mysqladmin ping -P 3306 -pmsandbox |grep alive || exit 1"
          --health-start-period 10s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 6

    steps:

      # No need to check for service health. GitHub Action took care of it.

      - name: Restart MySQL server with settings for replication
        run: |
          maj="${$(matrix.db_engine_version)%.*.*}"
          maj_min="${$(matrix.db_engine_version)%.*}"
          min="${maj_min#*.}"
          if [[ "${{ matrix.db_engine_name }}" == "mysql" && "$maj" == 8 && "$min" >= 2  ]]; then
            prima_conf='[mysqld]\\nserver-id=1\\nlog-bin=/var/lib/mysql/primary-bin\\nmysql-native-password=1'
            repl1_conf='[mysqld]\\nserver-id=2\\nlog-bin=/var/lib/mysql/replica1-bin\\nmysql-native-password=1'
            repl2_conf='[mysqld]\\nserver-id=3\\nlog-bin=/var/lib/mysql/replica2-bin\\nmysql-native-password=1'
          else
            prima_conf='[mysqld]\\nserver-id=1\\nlog-bin=/var/lib/mysql/primary-bin'
            repl1_conf='[mysqld]\\nserver-id=2\\nlog-bin=/var/lib/mysql/replica1-bin'
            repl2_conf='[mysqld]\\nserver-id=3\\nlog-bin=/var/lib/mysql/replica2-bin'
          fi
          docker exec -e cnf=$prima_conf ${{ job.services.db_primary.id }} bash -c 'echo -e ${cnf//\\n/\n} > /etc/mysql/conf.d/replication.cnf'
          docker exec -e cnf=$repl1_conf ${{ job.services.db_replica1.id }} bash -c 'echo -e ${cnf//\\n/\n} > /etc/mysql/conf.d/replication.cnf'
          docker exec -e cnf=$repl2_conf ${{ job.services.db_replica2.id }} bash -c 'echo -e ${cnf//\\n/\n} > /etc/mysql/conf.d/replication.cnf'
          docker restart -t 30 ${{ job.services.db_primary.id }}
          docker restart -t 30 ${{ job.services.db_replica1.id }}
          docker restart -t 30 ${{ job.services.db_replica2.id }}

      - name: Wait for the primary to be healthy
        run: >
          while ! /usr/bin/docker inspect
          --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}"
          ${{ job.services.db_primary.id }}
          | grep healthy && [[ "$SECONDS" -lt 120 ]]; do sleep 1; done

      - name: >-
          Perform integration testing against
          Ansible version ${{ matrix.ansible }}
          under Python ${{ matrix.python }}
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          pre-test-cmd: >-
            echo Setting db_engine_name to "${{ matrix.db_engine_name }}"...;
            echo -n "${{ matrix.db_engine_name }}"
            > tests/integration/db_engine_name;

            echo Setting db_engine_version to \
            "${{ matrix.db_engine_version }}"...;
            echo -n "${{ matrix.db_engine_version }}"
            > tests/integration/db_engine_version;

            echo Setting Connector name to "${{ matrix.connector_name }}"...;
            echo -n "${{ matrix.connector_name }}"
            > tests/integration/connector_name;

            echo Setting Connector name to "${{ matrix.connector_version }}"...;
            echo -n "${{ matrix.connector_version }}"
            > tests/integration/connector_version;

            echo Setting Python version to "${{ matrix.python }}"...;
            echo -n "${{ matrix.python }}"
            > tests/integration/python;

            echo Setting Ansible version to "${{ matrix.ansible }}"...;
            echo -n "${{ matrix.ansible }}"
            > tests/integration/ansible
          target-python-version: ${{ matrix.python }}
          testing-type: integration

  units:
    runs-on: ubuntu-22.04
    name: Units (Ⓐ${{ matrix.ansible }})
    strategy:
      # As soon as the first unit test fails,
      # cancel the others to free up the CI queue
      fail-fast: true
      matrix:
        ansible:
          - stable-2.15
          - stable-2.16
          - stable-2.17
          - devel
        python:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
        exclude:
          - python: '3.8'
            ansible: stable-2.16

          - python: '3.8'
            ansible: stable-2.17

          - python: '3.8'
            ansible: devel

          - python: '3.9'
            ansible: stable-2.15

          - python: '3.9'
            ansible: stable-2.17

          - python: '3.9'
            ansible: devel

          - python: '3.10'
            ansible: stable-2.15

          - python: '3.10'
            ansible: stable-2.16

          - python: '3.11'
            ansible: stable-2.15

          - python: '3.11'
            ansible: stable-2.16

          - python: '3.12'
            ansible: stable-2.15

          - python: '3.12'
            ansible: stable-2.16

    steps:
      - name: >-
          Perform unit testing against
          Ansible version ${{ matrix.ansible }}
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          target-python-version: ${{ matrix.python }}
          testing-type: units
          pull-request-change-detection: true
