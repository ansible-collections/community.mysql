---
# Test code for mysql_role module

- vars:
    mysql_parameters: &mysql_params
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: '{{ mysql_host }}'
      login_port: '{{ mysql_primary_port }}'

  block:

  - name: Get server version
    mysql_info:
      <<: *mysql_params
    register: srv

  - name: When run with unsupported server versions, must fail
    mysql_role:
      <<: *mysql_params
      name: test
    register: result
    ignore_errors: yes

  - name: Must fail when meet unsupported version
    assert:
      that:
        - result is failed
        - result is search('Roles are not supported by the server')
    when:
      - srv['version']['major'] < 8

  - name: Skip unsupported versions
    meta: end_play
    when: srv['version']['major'] < 8

  #########
  # Prepare
  - name: Create db test_db
    mysql_db:
      <<: *mysql_params
      name: 'test_db'
    register: result

  - name: Create table test_table
    mysql_query:
      <<: *mysql_params
      login_db: 'test_db'
      query: 'DROP TABLE IF EXISTS test_table'
    register: result

  - name: Create table test_table
    mysql_query:
      <<: *mysql_params
      login_db: 'test_db'
      query: 'CREATE TABLE IF NOT EXISTS test_table (id int)'
    register: result

  - name: Create users
    mysql_user:
      <<: *mysql_params
      name: '{{ item }}'
      host: '%'
      password: '{{ mysql_password }}'
    loop:
      - 'user0'
      - 'user1'
      - 'user2'

  ###########
  # Run tests

  - name: Create role0 in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user0@%'
    register: result
    check_mode: yes

  - name: Assert that create role0 is changed
    assert:
      that:
        - result is changed

  - name: Check in DB
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that user is not in mysql.user
    assert:
      that:
        - result.rowcount.0 == 0

  # It must fail because of check_mode
  - name: Check in DB, if not granted, the query will fail (expect failure)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that show grants is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Check in DB (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that user is not in mysql.roles_mapping (mariadb)
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  # =====================

  - name: Check that the user have no active roles
    mysql_query:
      login_user: 'user0'
      login_password: '{{ mysql_password }}'
      login_host: '{{ mysql_host }}'
      login_port: '{{ mysql_primary_port }}'
      query: 'SELECT COALESCE(current_role(), "NONE") as "current_role()"'
    register: result

  - name: Assert that the user have no active roles
    assert:
      that:
        - result.query_result.0.0["current_role()"] == "NONE"

  - name: Create role role0
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user0@%'
    register: result

  - name: Assert that create role is changed
    assert:
      that:
        - result is changed

  - name: Check in DB
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role0 is in mysql.user
    assert:
      that:
        - result.rowcount.0 == 1

  - name: Query role0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that show grants is succeeded (mysql)
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Check in DB (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that role is in mysql.roles_mapping (mariadb)
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Check that the role is active
    mysql_query:
      login_user: 'user0'
      login_password: '{{ mysql_password }}'
      login_host: '{{ mysql_host }}'
      login_port: '{{ mysql_primary_port }}'
      query: 'SELECT current_role()'
    register: result
    when: db_engine == 'mysql'

  - name: Assert that current_role() returns role0
    assert:
      that:
        - "'role0' in result.query_result.0.0['current_role()']"
    when: db_engine == 'mysql'

  - name: Check that the role is active (mariadb)
    mysql_query:
      login_user: 'user0'
      login_password: '{{ mysql_password }}'
      login_host: '{{ mysql_host }}'
      login_port: '{{ mysql_primary_port }}'
      query:
        - 'SET ROLE role0'
        - 'SELECT current_role()'
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that role is active (mariadb)
    assert:
      that:
        - "'role0' in result.query_result.1.0['current_role()']"
    when: db_engine == 'mariadb'

  # ========================

  - name: Create role role0 again in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
    register: result
    check_mode: yes

  - name: Assert that create role role0 again is not changed
    assert:
      that:
        - result is not changed

  - name: Check in DB
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role role0 is present in the database
    assert:
      that:
        - result.rowcount.0 == 1

  - name: Query role0, if not granted, the query will fail (2)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query for the role0 is succeeded for mysql (2)
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Check in DB (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query for the role0 is succeeded for mariadb
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  # ========================

  - name: Create role0 again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
    register: result

  - name: Assert that create role0 again is not changed
    assert:
      that:
        - result is not changed

  - name: Query role0
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role0 is in DB
    assert:
      that:
        - result.rowcount.0 == 1

  # ========================

  - name: Drop role0 in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: absent
    register: result
    check_mode: yes

  - name: Assert that drop role0 in check_mode is changed
    assert:
      that:
        - result is changed

  - name: Query role0
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role0 is in DB
    assert:
      that:
        - result.rowcount.0 == 1

  # Must pass because of check_mode
  - name: Query role0, if not granted, the query will fail (3)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that role0 is still in mysql after drop in check_mode (3)
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  # Must pass because of check_mode
  - name: Query count for user0 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that role0 is still in mariadb after drop in check_mode
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  # ========================

  - name: Drop role0
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: absent
    register: result

  - name: Assert that drop role0 is changed
    assert:
      that:
        - result is changed

  - name: Query role0
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role0 is absent from db
    assert:
      that:
        - result.rowcount.0 == 0

  - name: Query grants for role0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that query for role0 in mysql is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query count for user0 and role0 in mariadb
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mariadb'

  - name: Assert that query count for user0 and role0 in mariadb returns 0 rows
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  # ========================

  - name: Drop role0 again in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: absent
    register: result
    check_mode: yes

  - name: Assert that drop role0 again in check_mode is not changed
    assert:
      that:
        - result is not changed

  - name: Drop role0 again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: absent
    register: result

  - name: Assert that drop role0 again is not changed
    assert:
      that:
        - result is not changed

  # ==================

  - name: Create role0 in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user0@%'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'
    register: result
    check_mode: yes

  - name: Assert that create role0 in check_mode is changed
    assert:
      that:
        - result is changed

  - name: Query role0
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role0 created in check_mode is not in the database
    assert:
      that:
        - result.rowcount.0 == 0

  # ========================

  - name: Create role0
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user0@%'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'
    register: result

  - name: Assert that create role0 is changed
    assert:
      that:
        - result is changed

  - name: Query role0
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0'"
    register: result

  - name: Assert that role0 is in the database
    assert:
      that:
        - result.rowcount.0 == 1

  # ========================

  - name: Create role0 in check_mode again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user0@%'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'
    register: result
    check_mode: yes

  # TODO fix this with mariadb. I disable this test because I'm not an
  # expert with roles and I don't know if it's a correct behavior of our module
  # against MariaDB or if it is a bug. We never tested MariaDB properly...
  - name: Assert that create role0 in check_mode again is not changed
    assert:
      that:
        - result is not changed
    when:
      - db_engine == 'mysql'

  # ========================

  - name: Create role0 again (2)
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user0@%'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'
    register: result

  # TODO fix this with mariadb. I disable this test because I'm not an
  # expert with roles and I don't know if it's a correct behavior of our module
  # against MariaDB or if it is a bug. We never tested MariaDB properly...
  - name: Assert that create role0 again is not changed (2)
    assert:
      that:
        - result is not changed
    when:
      - db_engine == 'mysql'


  # ##############################################
  # Test rewriting / appending / detaching members
  # ##############################################

  - name: Create role1
    mysql_role:
      <<: *mysql_params
      name: 'role1'
      state: present
    register: result

  # Rewriting members
  - name: Rewrite members in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user1@%'
        - 'user2@%'
        - 'role1'
    register: result
    check_mode: yes

  - name: Assert that rewrite members in check_mode is changed
    assert:
      that:
        - result is changed

  # user0 is still a member because of check_mode
  - name: Query user0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that show grants for user0 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  # user0 is still a member because of check_mode
  - name: Query user0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that show grants for user0 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  # user1, user2, and role1 are not members because of check_mode
  - name: Query user1, if not granted, the query will fail (expect failue)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user1@'%' USING 'role0'"
    ignore_errors: yes
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query for user1 in mysql is failed due to check_mode
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query user1 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user1' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query for user1 in mariadb is failed due to check_mode
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  - name: Query user2, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user2@'%' USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that query for user2 in mysql is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query user2 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user2' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query user2 in mariadb returns 0 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  - name: Query role1, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR role1 USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that query role1 in mysql is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query role1 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'role1' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query role0 in mariadb returns 0 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  # ========================

  - name: Rewrite members
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user1@%'
        - 'user2@%'
        - 'role1'
    register: result

  - name: Assert that rewrite members is changed
    assert:
      that:
        - result is changed

  # user0 is not a member any more
  - name: Query user0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that query user0 in mysql is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  # user0 is not a member any more
  - name: Query user0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query user0 in mariadb doesn't returns role0
    assert:
      that:
        - "'role0' not in result.query_result.0.0['Grants for user0@%']"
    when: db_engine == 'mariadb'

  - name: Query user1, if not granted, the query will fail (expect success)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user1@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user1 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query user1 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user1' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query user1 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Query user2, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user2@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user2 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query user2 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user2' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query user2 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Query role0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR role1 USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that query role0 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count user is role1 and role is role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'role1' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count user is role1 and role is role0 returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'


  # ==========================

  - name: Rewrite members again in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user1@%'
        - 'user2@%'
        - 'role1'
    register: result
    check_mode: yes

  - name: Assert that rewrite members again in check_mode is not changed
    assert:
      that:
        - result is not changed

  # ==========================

  - name: Rewrite members again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'user1@%'
        - 'user2@%'
        - 'role1'
    register: result

  - name: Assert that rewrite members again is not changed
    assert:
      that:
        - result is not changed

  # ==========================

  # Append members
  - name: Append a member in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      append_members: yes
      members:
        - 'user0@%'
    register: result
    check_mode: yes

  - name: Assert that append a member in check_mode is changed
    assert:
      that:
        - result is changed

  - name: Query user0, if not granted, the query will fail (expect failure)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    ignore_errors: yes
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user0 is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query count for user0 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user0 and role0 in mariadb resturns 0 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'
  # =====================

  - name: Append a member
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      append_members: yes
      members:
        - 'user0@%'
    register: result

  - name: Assert that append a member is changed
    assert:
      that:
        - result is changed

  - name: Query user0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user0 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count for user0 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user0 and role0 in mariadb resturns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  # user1 and user2 must still be in DB because we are appending
  - name: Query user1 using role0 (expect success)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user1@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query for user1 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count for user1 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user1' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user1 and role0 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Query user2, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user2@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user2 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count for user2 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user2' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user2 and role0 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  # ========================

  - name: Append a member again in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      append_members: yes
      members:
        - 'user0@%'
    register: result
    check_mode: yes

  - name: Assert that append a member again in check_mode is not changed
    assert:
      that:
        - result is not changed

  # ========================

  - name: Append a member again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      append_members: yes
      members:
        - 'user0@%'
    register: result

  - name: Assert that append a member again is not changed
    assert:
      that:
        - result is not changed

  ##############
  # Detach users
  - name: Detach users in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      detach_members: yes
      members:
        - 'user1@%'
        - 'user2@%'
    register: result
    check_mode: yes

  - name: Assert that detach users in check_mode is changed
    assert:
      that:
        - result is changed

  # They must be there because of check_mode
  - name: Query user0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user0 is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count for user0 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user0 and role0 in mariadb resturns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Query user1 using role0 (expect success)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user1@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user1 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count for user1 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user1' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user1 and role0 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Query user2, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user2@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user2 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count user2 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user2' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count user2 and role0 in mariadb returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  # ========================

  - name: Detach users
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      detach_members: yes
      members:
        - 'user1@%'
        - 'user2@%'
    register: result

  - name: Assert that detach users is changed
    assert:
      that:
        - result is changed

  - name: Query user0, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user0@'%' USING 'role0'"
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user0 in mysql is succeeded
    assert:
      that:
        - result is succeeded
    when: db_engine == 'mysql'

  - name: Query count for user0 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user0' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user0 and role0 returns 1 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 1
    when: db_engine == 'mariadb'

  - name: Query user1, if not granted, the query will fail (expect failure)
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user1@'%' USING 'role0'"
    ignore_errors: yes
    register: result
    when: db_engine == 'mysql'

  - name: Assert that query user1 in mysql is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query count for user1 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user1' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user1 and role0 in mariadb returns 0 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  - name: Query user2, if not granted, the query will fail
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user2@'%' USING 'role0'"
    register: result
    ignore_errors: yes
    when: db_engine == 'mysql'

  - name: Assert that query user2 in mysql is failed
    assert:
      that:
        - result is failed
    when: db_engine == 'mysql'

  - name: Query count for user2 and role0 (mariadb)
    mysql_query:
      <<: *mysql_params
      query: "SELECT count(User) as user_roles FROM mysql.roles_mapping WHERE User = 'user2' AND Host = '%' AND Role = 'role0'"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query count for user2 and role0 returns 0 row
    assert:
      that:
        - result.query_result.0.0['user_roles'] == 0
    when: db_engine == 'mariadb'

  # =====================

  - name: Detach users in check_mode again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      detach_members: yes
      members:
        - 'user1@%'
        - 'user2@%'
    register: result
    check_mode: yes

  - name: Assert that detach users in check_mode again is not changed
    assert:
      that:
        - result is not changed

  - name: Detach users again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      detach_members: yes
      members:
        - 'user1@%'
        - 'user2@%'
    register: result

  - name: Assert that detach users again is not changed
    assert:
      that:
        - result is not changed

  - name: '"detach" users when creating a new role'
    mysql_role:
      <<: *mysql_params
      name: 'role3'
      state: present
      detach_members: yes
      members:
        - 'user1@%'
    register: result

  - name: Assert that creating a role while detach users is changed
    assert:
      that:
        - result is changed

  - name: Query grants for user1
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR user1@'%'"
    register: result

  - name: Assert detach_members did not add a user to the role
    assert:
      that:
        - "'role3' not in result.query_result.0.0"

  # test members_must_exist
  - name: Try failing on not-existing user in check-mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members_must_exist: yes
      append_members: yes
      members:
        - 'not_existent@%'
    register: result
    ignore_errors: yes
    check_mode: yes

  - name: Assert nonexistent user in check-mode is failed
    assert:
      that:
        - result is failed

  - name: Try failing on not-existing user in check-mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members_must_exist: no
      append_members: yes
      members:
        - 'not_existent@%'
    register: result
    check_mode: yes

  - name: Check for lack of change
    assert:
      that:
        - result is not changed

  - name: Try failing on not-existing user
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members_must_exist: yes
      append_members: yes
      members:
        - 'not_existent@%'
    register: result
    ignore_errors: yes

  - name: Assert nonexistent user with members_must_exist is failed
    assert:
      that:
        - result is failed

  - name: Try failing on not-existing user
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members_must_exist: no
      append_members: yes
      members:
        - 'not_existent@%'
    register: result

  - name: Assert nonexistent user with members_must_exist=no is not changed
    assert:
      that:
        - result is not changed

  # ##########
  # Test privs
  # ##########

  - name: Create test DBs
    mysql_query:
      <<: *mysql_params
      query: 'CREATE DATABASE {{ item }}'
    loop:
      - 'test_db1'
      - 'test_db2'
    register: result

  - name: Create table test_table
    mysql_query:
      <<: *mysql_params
      login_db: '{{ item }}'
      query: 'CREATE TABLE test_table (id int)'
    loop:
      - 'test_db1'
      - 'test_db2'
    register: result

  - name: Query grants for role0
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR role0"
    register: result

  - name: Assert grants for role0 in mysql
    assert:
      that:
        - result.query_result.0.0["Grants for role0@%"] == "GRANT SELECT, INSERT ON *.* TO `role0`@`%`"
        - result.query_result.0.1["Grants for role0@%"] == "GRANT UPDATE ON `mysql`.* TO `role0`@`%`"
        - result.rowcount.0 == 2
    when: db_engine == 'mysql'

  - name: Assert grants for role0 in mariadb
    assert:
      that:
        - result.query_result.0.0["Grants for role0"] == "GRANT SELECT, INSERT ON *.* TO `role0`"
        - result.query_result.0.1["Grants for role0"] == "GRANT UPDATE ON `mysql`.* TO `role0`"
        - result.rowcount.0 == 2
    when: db_engine == 'mariadb'

  - name: Append privs in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      priv: 'test_db1.test_table:SELECT,INSERT/test_db2.test_table:DELETE'
      append_privs: yes
    register: result
    check_mode: yes

  - name: Assert append privs in check_mode is changed
    assert:
      that:
        - result is changed

  - name: Query grants for role0
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR role0"
    register: result

  - name: Assert grants for role0 in mysql
    assert:
      that:
        - result.query_result.0.0["Grants for role0@%"] == "GRANT SELECT, INSERT ON *.* TO `role0`@`%`"
        - result.query_result.0.1["Grants for role0@%"] == "GRANT UPDATE ON `mysql`.* TO `role0`@`%`"
        - result.rowcount.0 == 2
    when: db_engine == 'mysql'

  - name: Assert grants for role0 in mariadb
    assert:
      that:
        - result.query_result.0.0["Grants for role0"] == "GRANT SELECT, INSERT ON *.* TO `role0`"
        - result.query_result.0.1["Grants for role0"] == "GRANT UPDATE ON `mysql`.* TO `role0`"
        - result.rowcount.0 == 2
    when: db_engine == 'mariadb'

  - name: Append privs
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      priv: 'test_db1.test_table:SELECT,INSERT/test_db2.test_table:DELETE'
      append_privs: yes
    register: result

  - name: Assert that append privs is changed
    assert:
      that:
        - result is changed

  - name: Query grants for role0
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR role0"
    register: result

  - name: Assert grants for role0 in mysql
    assert:
      that:
        - result.query_result.0.0["Grants for role0@%"] == "GRANT SELECT, INSERT ON *.* TO `role0`@`%`"
        - result.query_result.0.1["Grants for role0@%"] == "GRANT UPDATE ON `mysql`.* TO `role0`@`%`"
        - result.query_result.0.2["Grants for role0@%"] == "GRANT SELECT, INSERT ON `test_db1`.`test_table` TO `role0`@`%`"
        - result.query_result.0.3["Grants for role0@%"] == "GRANT DELETE ON `test_db2`.`test_table` TO `role0`@`%`"
        - result.rowcount.0 == 4
    when: db_engine == 'mysql'

  - name: Assert grants for role0 in mariadb
    assert:
      that:
        - result.query_result.0.0["Grants for role0"] == "GRANT SELECT, INSERT ON *.* TO `role0`"
        - result.query_result.0.1["Grants for role0"] == "GRANT UPDATE ON `mysql`.* TO `role0`"
        - result.query_result.0.2["Grants for role0"] == "GRANT SELECT, INSERT ON `test_db1`.`test_table` TO `role0`"
        - result.query_result.0.3["Grants for role0"] == "GRANT DELETE ON `test_db2`.`test_table` TO `role0`"
        - result.rowcount.0 == 4
    when: db_engine == 'mariadb'

  - name: Append privs again in check_mode
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      priv: 'test_db1.test_table:SELECT,INSERT/test_db2.test_table:DELETE'
      append_privs: yes
    register: result
    check_mode: yes

  # TODO it must be changed. The module uses user_mod function
  # taken from mysql_user module. It's a bug / expected behavior
  # because I added a similar tasks to mysql_user tests
  # https://github.com/ansible-collections/community.mysql/issues/50#issuecomment-871216825
  # and it's also failed. Create an issue after the module is merged to avoid conflicts.
  # TODO Fix this after user_mod is fixed.
  - name: Assert that append privs again in check_mode is changed
    assert:
      that:
        - result is changed

  - name: Append privs again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      priv: 'test_db1.test_table:SELECT,INSERT/test_db2.test_table:DELETE'
      append_privs: yes
    register: result

  - name: Assert that append privs again is not changed
    assert:
      that:
        - result is not changed

  - name: Rewrite privs
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      priv:
        '*.*': 'SELECT'
    register: result

  - name: Assert that rewrite privs is changed
    assert:
      that:
        - result is changed

  - name: Query grants for role0
    mysql_query:
      <<: *mysql_params
      query: "SHOW GRANTS FOR role0"
    register: result

  - name: Assert grants for role0 in mysql
    assert:
      that:
        - result.query_result.0.0["Grants for role0@%"] == "GRANT SELECT ON *.* TO `role0`@`%`"
        - result.rowcount.0 == 1
    when: db_engine == 'mysql'

  - name: Assert grants for role0 in mariadb
    assert:
      that:
        - result.query_result.0.0["Grants for role0"] == "GRANT SELECT ON *.* TO `role0`"
        - result.rowcount.0 == 1
    when: db_engine == 'mariadb'

  # #################
  # Test admin option
  # #################

  - name: Drop role0
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: absent
    register: result

  - name: Create role0 with admin
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      admin: 'user0@%'
    register: result
    ignore_errors: yes

  - name: Assert expected error message for mysql
    assert:
      that:
        - result is failed
        - result.msg is search('option can be used only with MariaDB')
    when: db_engine == 'mysql'

  - name: Assert create role0 in mariadb is changed
    assert:
      that:
        - result is changed
    when: db_engine == 'mariadb'

  - name: Query role0 in mariadb
    mysql_query:
      <<: *mysql_params
      query: "SELECT 1 FROM mysql.user WHERE User = 'role0' AND Host = ''"
    register: result
    when: db_engine == 'mariadb'

  - name: Assert that query role0 in mariadb returns 1 row
    assert:
      that:
        - result.rowcount.0 == 1
    when: db_engine == 'mariadb'

  - name: Create role0 with admin again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      admin: 'user0@%'
    register: result
    ignore_errors: yes

  - name: Assert expected error message in mysql again
    assert:
      that:
        - result is failed
        - result.msg is search('option can be used only with MariaDB')
    when: db_engine == 'mysql'

  - name: Assert create role0 in mariadb is not changed
    assert:
      that:
        - result is not changed
    when: db_engine == 'mariadb'

  # Try to grant a role to a user who does not exist
  - name: Create role0 with admin again
    mysql_role:
      <<: *mysql_params
      name: 'role0'
      state: present
      members:
        - 'nonexistent@%'
    register: result
    ignore_errors: yes

  - name: Assert that create role0 with admin again is failed
    assert:
      that:
        - result is failed
        - result.msg is search('does not exist')

  always:

    - name: Clean up DBs
      mysql_query:
        <<: *mysql_params
        query: 'DROP DATABASE IF EXISTS {{ item }}'
      loop:
        - 'test_db'
        - 'test_db1'
        - 'test_db2'

    - name: Clean up users
      mysql_user:
        <<: *mysql_params
        name: '{{ item }}'
        state: absent
      loop:
        - 'user0'
        - 'user1'
        - 'user2'

    - name: Clean up roles
      mysql_role:
        <<: *mysql_params
        name: '{{ item }}'
        state: absent
      loop:
        - 'role0'
        - 'test'
        - 'role3'
