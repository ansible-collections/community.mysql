---
- name: Utils | Assert user password_expire | Create modify {{ username }} with password_expire
  community.mysql.mysql_user:
    login_user: "{{ mysql_parameters.login_user }}"
    login_password: "{{ mysql_parameters.login_password }}"
    login_host: "{{ mysql_parameters.login_host }}"
    login_port: "{{ mysql_parameters.login_port }}"
    state: present
    name: "{{ username }}"
    host: "{{ host }}"
    password: "{{ password }}"
    password_expire: "{{ password_expire }}"
    password_expire_interval: "{{ password_expire_interval | default(omit) }}"
  register: result
  check_mode: "{{ check_mode | default(false) }}"
  failed_when: result.changed != expect_change_value
  vars:
    expect_change_value: "{{ expect_change }}"

- name: Utils | Assert user password_lifetime | Query user '{{ username }}'
  ansible.builtin.command:
    cmd: >
      {{ mysql_command }} -BNe "SELECT IFNULL(password_lifetime, -1)
      FROM mysql.user where user='{{ username }}' and host='{{ host }}'"
  register: password_lifetime
  when:
    - db_engine == 'mysql'
    - db_version is version('5.7.0', '>=')
  failed_when: expected_password_lifetime_value not in password_lifetime.stdout_lines
  vars:
    expected_password_lifetime_value: "{{ expected_password_lifetime }}"

- name: Utils | Assert user password_lifetime | Query user '{{ username }}'
  ansible.builtin.command:
    "{{ mysql_command }} -BNe \"SELECT JSON_EXTRACT(Priv, '$.password_lifetime') AS password_lifetime \
    FROM mysql.global_priv \
    WHERE user='{{ username }}' and host='{{ host }}'\""
  register: password_lifetime
  when:
    - db_engine == 'mariadb'
    - db_version is version('10.4.3', '>=')
  failed_when: expected_password_lifetime_value not in password_lifetime.stdout_lines
  vars:
    expected_password_lifetime_value: "{{ expected_password_lifetime }}"

- name: Utils | Assert user password_expired | Query user '{{ username }}'
  ansible.builtin.command:
    cmd: >
      {{ mysql_command }} -BNe "SELECT password_expired FROM mysql.user 
      WHERE user='{{ username }}' and host='{{ host }}'"
  register: password_expired
  when: (db_engine == 'mysql' and db_version is version('5.7.0', '>=')) or
    (db_engine == 'mariadb' and db_version is version('10.4.3', '>='))
  failed_when: expected_password_expired_value not in password_expired.stdout_lines
  vars:
    expected_password_expired_value: "{{ expected_password_expired }}"
