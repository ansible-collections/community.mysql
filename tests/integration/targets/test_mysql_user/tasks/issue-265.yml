---
- vars:
    mysql_parameters: &mysql_params
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: 127.0.0.1
      login_port: '{{ mysql_primary_port }}'

  block:
    - name: Drop mysql user if exists
      mysql_user:
        <<: *mysql_params
        name: '{{ user_name_1 }}'
        state: absent
      ignore_errors: yes

    # ============================================================
    - name: create mysql user {{user_name_1}}
      mysql_user:
        <<: *mysql_params
        name: '{{ user_name_1 }}'
        password: '{{ user_password_1 }}'
        state: present
        force_context: yes
      register: result

    - name: assert output message mysql user was created
      assert:
        that:
          - "result.changed == true"

- include: assert_user.yml user_name={{user_name_1}}

- vars:
    mysql_parameters: &mysql_params
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: 127.0.0.1
      login_port: '{{ mysql_primary_port }}'

  block:

    # ============================================================
    - name: remove mysql user {{user_name}}
      mysql_user:
        <<: *mysql_params
        name: '{{user_name}}'
        password: '{{user_password}}'
        state: absent
        force_context: yes
      register: result

    - name: assert output message mysql user was removed
      assert:
        that:
          - "result.changed == true"

    # ============================================================
    - name: create blank mysql user to be removed later
      mysql_user:
        <<: *mysql_params
        name: ""
        state: present
        force_context: yes
        password: 'KJFDY&D*Sfuydsgf'

    - name: remove blank mysql user with hosts=all (expect changed)
      mysql_user:
        <<: *mysql_params
        user: ""
        host_all: true
        state: absent
        force_context: yes
      register: result

    - name: assert changed is true for removing all blank users
      assert:
        that:
          - "result.changed == true"

    - name: remove blank mysql user with hosts=all (expect ok)
      mysql_user:
        <<: *mysql_params
        user: ""
        host_all: true
        force_context: yes
        state: absent
      register: result

    - name: assert changed is true for removing all blank users
      assert:
        that:
          - "result.changed == false"

- include: assert_no_user.yml user_name={{user_name_1}}
