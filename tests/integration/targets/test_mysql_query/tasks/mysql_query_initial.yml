---
# Test code for mysql_query module
# Copyright: (c) 2020, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
- vars:
    mysql_parameters: &mysql_params
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: '{{ mysql_host }}'
      login_port: '{{ mysql_primary_port }}'

  block:

  - name: Create db {{ test_db }}
    mysql_query:
      <<: *mysql_params
      query: 'CREATE DATABASE {{ test_db }}'
    register: result

  - name: Assert that create db test_db is changed and returns expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['CREATE DATABASE {{ test_db }}']

  - name: Create {{ test_table1 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'CREATE TABLE {{ test_table1 }} (id int)'
    register: result

  - name: Assert that create table test_table1 is changed and returns expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['CREATE TABLE {{ test_table1 }} (id int)']

  - name: Insert test data
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query:
        - 'INSERT INTO {{ test_table1 }} VALUES (1), (2)'
        - 'INSERT INTO {{ test_table1 }} VALUES (3)'
      single_transaction: yes
    register: result

  - name: Assert that inserting test data is changed and returns expected query and results
    assert:
      that:
        - result is changed
        - result.rowcount == [2, 1]
        - result.executed_queries == ['INSERT INTO {{ test_table1 }} VALUES (1), (2)', 'INSERT INTO {{ test_table1 }} VALUES (3)']

  - name: Check data in {{ test_table1 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table1 }}'
    register: result

  - name: Assert that query data in test_table1 is not changed and returns expected query and results
    assert:
      that:
        - result is not changed
        - result.executed_queries == ['SELECT * FROM {{ test_table1 }}']
        - result.rowcount == [3]
        - result.query_result[0][0].id == 1
        - result.query_result[0][1].id == 2
        - result.query_result[0][2].id == 3

  - name: Check data in {{ test_table1 }} using positional args
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table1 }} WHERE id = %s'
      positional_args:
      - 1
    register: result

  - name: Assert that query data in test_table1 using positional args is not changed and returns expected query and results
    assert:
      that:
        - result is not changed
        - result.executed_queries == ["SELECT * FROM {{ test_table1 }} WHERE id = 1"]
        - result.rowcount == [1]
        - result.query_result[0][0].id == 1

  - name: Check data in {{ test_table1 }} using named args
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table1 }} WHERE id = %(some_id)s'
      named_args:
        some_id: 1
    register: result

  - name: Assert that query data in test_table1 using named args is not changed and returns expected query and results
    assert:
      that:
        - result is not changed
        - result.executed_queries == ["SELECT * FROM {{ test_table1 }} WHERE id = 1"]
        - result.rowcount == [1]
        - result.query_result[0][0].id == 1

  - name: Update data in {{ test_table1 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'UPDATE {{ test_table1 }} SET id = %(new_id)s WHERE id = %(current_id)s'
      named_args:
        current_id: 1
        new_id: 0
    register: result

  - name: Assert that update data in test_table1 is changed and returns the expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['UPDATE {{ test_table1 }} SET id = 0 WHERE id = 1']
        - result.rowcount == [1]

  - name: Check the prev update - row with value 1 does not exist anymore
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table1 }} WHERE id = %(some_id)s'
      named_args:
        some_id: 1
    register: result

  - name: Assert that query that check the prev update is not changed and returns the expected query with id = 1
    assert:
      that:
        - result is not changed
        - result.executed_queries == ['SELECT * FROM {{ test_table1 }} WHERE id = 1']
        - result.rowcount == [0]

  - name: Check the prev update - row with value - exist
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table1 }} WHERE id = %(some_id)s'
      named_args:
        some_id: 0
    register: result

  - name: Assert that query that check the prev update is not changed and returns the expected query with id = 0
    assert:
      that:
        - result is not changed
        - result.executed_queries == ['SELECT * FROM {{ test_table1 }} WHERE id = 0']
        - result.rowcount == [1]

  - name: Update data in {{ test_table1 }} again
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'UPDATE {{ test_table1 }} SET id = %(new_id)s WHERE id = %(current_id)s'
      named_args:
        current_id: 1
        new_id: 0
    register: result

  - name: Assert that update data in test_table1 again is not changed and returns expected query
    assert:
      that:
        - result is not changed
        - result.executed_queries == ['UPDATE {{ test_table1 }} SET id = 0 WHERE id = 1']
        - result.rowcount == [0]

  - name: Delete data from {{ test_table1 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query:
      - 'DELETE FROM {{ test_table1 }} WHERE id = 0'
      - 'SELECT * FROM {{ test_table1 }} WHERE id = 0'
    register: result

  - name: Assert that delete data from test_table1 is changed an returns expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['DELETE FROM {{ test_table1 }} WHERE id = 0', 'SELECT * FROM {{ test_table1 }} WHERE id = 0']
        - result.rowcount == [1, 0]

  - name: Delete data from {{ test_table1 }} again
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'DELETE FROM {{ test_table1 }} WHERE id = 0'
    register: result

  - name: Assert that delete data from test_table1 again is not changed and returns expected query
    assert:
      that:
        - result is not changed
        - result.executed_queries == ['DELETE FROM {{ test_table1 }} WHERE id = 0']
        - result.rowcount == [0]

  - name: Truncate {{ test_table1 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query:
        - 'TRUNCATE {{ test_table1 }}'
        - 'SELECT * FROM {{ test_table1 }}'
    register: result

  - name: Assert that truncate test_table1 is changed and returns expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['TRUNCATE {{ test_table1 }}', 'SELECT * FROM {{ test_table1 }}']
        - result.rowcount == [0, 0]

  - name: Rename {{ test_table1 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'RENAME TABLE {{ test_table1 }} TO {{ test_table2 }}'
    register: result

  - name: Assert that rename table test_table1 is changed and returns expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['RENAME TABLE {{ test_table1 }} TO {{ test_table2 }}']
        - result.rowcount == [0]

  - name: Check the prev rename
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table1 }}'
    register: result
    ignore_errors: yes

  - name: Assert that query old table is failed
    assert:
      that:
        - result is failed

  - name: Check the prev rename
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT * FROM {{ test_table2 }}'
    register: result

  - name: Assert that query new table succeed and returns 0 row
    assert:
      that:
        - result.rowcount == [0]

  - name: Create {{ test_table3 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'CREATE TABLE {{ test_table3 }} (id int, story text)'

  - name: Add data to {{ test_table3 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: "INSERT INTO {{ test_table3 }} (id, story) VALUES (1, 'first'), (2, 'second')"

  - name: Select from {{ test_table3 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'SELECT id, story FROM {{ test_table3 }}'
    register: result

  - name: Assert that select from test_table3 returns 2 rows
    assert:
      that:
        - result.rowcount == [2]

  - name: Pass wrong query type
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: {'this type is': 'wrong'}
    register: result
    ignore_errors: yes

  - name: Assert that pass wrong query type is failed
    assert:
      that:
        - result is failed
        - result.msg is search('the query option value must be a string or list')

  - name: Pass wrong query element
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query:
      - 'SELECT now()'
      - {'this type is': 'wrong'}
    register: result
    ignore_errors: yes

  - name: Assert that pass wrong query element is failed
    assert:
      that:
        - result is failed
        - result.msg is search('the elements in query list must be strings')

  - name: Create {{ test_table4 }}
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'CREATE TABLE {{ test_table4 }} (id int primary key, story text)'

  - name: Insert test data using replace statement
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: "REPLACE INTO {{ test_table4 }} VALUES (1, 'first')"
      single_transaction: yes
    register: result

  - name: Assert that insert test data using replace statement is changed
    assert:
      that:
        - result is changed
        - result.rowcount == [1]

  - name: Replace test data
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: "REPLACE INTO {{ test_table4 }} VALUES (1, 'one')"
      single_transaction: yes
    register: result

  - assert:
      that:
        - result is changed
        - result.rowcount == [2]

  # Issue https://github.com/ansible-collections/community.mysql/issues/268
  - name: Create table
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: "CREATE TABLE issue268 (id int)"
      single_transaction: yes

  # Issue https://github.com/ansible-collections/community.mysql/issues/268
  - name: Create table with IF NOT EXISTS
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: "CREATE TABLE IF NOT EXISTS issue268 (id int)"
      single_transaction: yes
    register: result

  # Issue https://github.com/ansible-collections/community.mysql/issues/268
  - name: Assert that create table IF NOT EXISTS is not changed with pymysql
    assert:
      that:
        # PyMySQL driver throws a warning for version before 0.10.0
        - result is not changed
    when:
      - connector_name == 'pymysql'
      - connector_version is version('0.10.0', '<')

  # Issue https://github.com/ansible-collections/community.mysql/issues/268
  - name: Assert that create table IF NOT EXISTS is changed with mysqlclient
    assert:
      that:
        # Mysqlclient 2.0.1 and pymysql 0.10.0+ drivers throws no warning,
        # so it's impossible to figure out if the state was changed or not.
        # We assume that it was for DDL queries by default in the code
        - result is changed
    when:
      - >
        connector_name == 'mysqlclient'
        or (
          connector_name == 'pymysql'
          and connector_version is version('0.10.0', '>')
        )

  - name: Drop db {{ test_db }}
    mysql_query:
      <<: *mysql_params
      query: 'DROP DATABASE {{ test_db }}'
    register: result

  - name: Assert that drop database is changed and returns expected query
    assert:
      that:
        - result is changed
        - result.executed_queries == ['DROP DATABASE {{ test_db }}']

  always:

    - name: Clean up test_db
      mysql_query:
        <<: *mysql_params
        query: 'DROP DATABASE IF EXISTS {{ test_db }}'
