# test code for state dump and import for mysql_db module
# (c) 2014,  Wayne Rosario <wrosario@ansible.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ============================================================
- name: Dump and Import | Set facts
  set_fact:
    db_file_name: "{{ tmp_dir }}/{{ file }}"
    wrong_sql_file: "{{ tmp_dir }}/wrong.sql"
    dump_file1: "{{ tmp_dir }}/{{ file2 }}"
    dump_file2: "{{ tmp_dir }}/{{ file3 }}"
    db_user: "test"
    db_user_unsafe_password: "pass!word"
    config_file: "{{ playbook_dir }}/root/.my.cnf"

- name: Dump and Import | Create custom config file
  shell: 'echo "[client]" > {{ config_file }}'

- name: Dump and Import | Create user for test unsafe_login_password parameter
  mysql_user:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_user }}'
    host: '%'
    password: '{{ db_user_unsafe_password }}'
    priv: '*.*:ALL'
    state: present

- name: Dump and Import | State dump/import - create database
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: present
    check_implicit_admin: yes

- name: Dump and Import | Create database
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name2 }}'
    state: present
    check_implicit_admin: no

- name: Dump and Import | State dump/import - create table department
  command: "{{ mysql_command }} {{ db_name }} \"-e create table department(id int, name varchar(100))\""

- name: Dump and Import | State dump/import - create table employee
  command: "{{ mysql_command }} {{ db_name }} \"-e create table employee(id int, name varchar(100))\""

- name: Dump and Import | State dump/import - insert data into table employee
  command: "{{ mysql_command }} {{ db_name }} \"-e insert into employee value(47,'Joe Smith')\""

- name: Dump and Import | State dump/import - insert data into table department
  command: "{{ mysql_command }} {{ db_name }} \"-e insert into department value(2,'Engineering')\""

- name: Dump and Import | State dump/import - file name should not exist
  file:
    name: '{{ db_file_name }}'
    state: absent

- name: Dump and Import | Database dump file1 should not exist
  file:
    name: '{{ dump_file1 }}'
    state: absent

- name: Dump and Import | Database dump file2 should not exist
  file:
    name: '{{ dump_file2 }}'
    state: absent

- name: Dump and Import | State dump without department table.
  mysql_db:
    login_user: '{{ db_user }}'
    login_password: '{{ db_user_unsafe_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    unsafe_login_password: yes
    name: '{{ db_name }}'
    state: dump
    target: '{{ db_file_name }}'
    ignore_tables:
      - "{{ db_name }}.department"
    force: yes
    master_data: 1
    skip_lock_tables: yes
    dump_extra_args: >-
      --skip-triggers
    config_file: '{{ config_file }}'
    restrict_config_file: yes
    check_implicit_admin: no
  register: result

- name: Dump and Import | Assert successful completion of dump operation
  assert:
    that:
      - result is changed
      - result.executed_commands[0] is search(".department --master-data=1 --skip-triggers")

- name: Dump and Import | State dump/import - file name should exist (db_file_name)
  file:
    name: '{{ db_file_name }}'
    state: file

- name: Dump and Import | State dump with multiple databases in comma separated form for MySQL.
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: "{{ db_name }},{{ db_name2 }}"
    state: dump
    target: '{{ dump_file1 }}'
    check_implicit_admin: yes
  register: dump_result1

- name: Dump and Import | Assert successful completion of dump operation (with multiple databases in comma separated form)
  assert:
    that:
      - dump_result1 is changed
      - dump_result1.executed_commands[0] is search(" --user=root --password=\*\*\*\*\*\*\*\*")

- name: Dump and Import | State dump - dump file1 should exist
  file:
    name: '{{ dump_file1 }}'
    state: file

- name: Dump and Import | State dump with multiple databases in list form via check_mode
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name:
      - '{{ db_name }}'
      - '{{ db_name2 }}'
    state: dump
    target: '{{ dump_file2 }}'
  register: dump_result
  check_mode: yes

- name: Dump and Import | Assert successful completion of dump operation (with multiple databases in list form) via check mode
  assert:
    that:
      - dump_result is changed

- name: Dump and Import | Database dump file2 should not exist
  stat:
    path: '{{ dump_file2 }}'
  register: stat_result

- name: Dump and Import | Assert that check_mode does not create dump file for databases
  assert:
    that:
      - stat_result.stat.exists is defined and not stat_result.stat.exists

- name: Dump and Import | State dump with multiple databases in list form.
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name:
      - '{{ db_name }}'
      - '{{ db_name2 }}'
    state: dump
    target: '{{ dump_file2 }}'
  register: dump_result2

- name: Dump and Import | Assert successful completion of dump operation (with multiple databases in list form)
  assert:
    that:
      - dump_result2 is changed

- name: Dump and Import | State dump - dump file2 should exist
  file:
    name: '{{ dump_file2 }}'
    state: file

- name: Dump and Import | State dump/import - remove database
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: absent

- name: Dump and Import | Remove database
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name2 }}'
    state: absent

- name: Dump and Import | Test state=import to restore the database of type {{ format_type }} (expect changed=true)
  mysql_db:
    login_user: '{{ db_user }}'
    login_password: '{{ db_user_unsafe_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    unsafe_login_password: yes
    name: '{{ db_name }}'
    state: import
    target: '{{ db_file_name }}'
    use_shell: yes
  register: result

- name: Dump and Import | Show the tables
  command: "{{ mysql_command }} {{ db_name }} \"-e show tables\""
  register: result

- name: Dump and Import | Assert that the department table is absent.
  assert:
    that:
      - "'department' not in result.stdout"

- name: Dump and Import | Test state=import to restore a database from multiple database dumped file1
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name2 }}'
    state: import
    target: '{{ dump_file1 }}'
    use_shell: no
  register: import_result

- name: Dump and Import | Assert output message restored a database from dump file1
  assert:
    that:
      - import_result is changed

- name: Dump and Import | Remove database
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name2 }}'
    state: absent

- name: Dump and Import | Run command to list databases
  command: "{{ mysql_command }} \"-e show databases like 'data%'\""
  register: mysql_result

- name: Dump and Import | Assert that db_name2 database does not exist
  assert:
    that:
      - "'{{ db_name2 }}' not in mysql_result.stdout"

- name: Dump and Import | Test state=import to restore a database from dumped file2 (check mode)
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name2 }}'
    state: import
    target: '{{ dump_file2 }}'
  register: check_import_result
  check_mode: yes

- name: Dump and Import | Assert output message restored a database from dump file2 (check mode)
  assert:
    that:
      - check_import_result is changed

- name: Dump and Import | Run command to list databases
  command: "{{ mysql_command }} \"-e show databases like 'data%'\""
  register: mysql_result

- name: Dump and Import | Assert that db_name2 database does not exist (check mode)
  assert:
    that:
      - "'{{ db_name2 }}' not in mysql_result.stdout"

- name: Dump and Import | Test state=import to restore a database from multiple database dumped file2
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name2 }}'
    state: import
    target: '{{ dump_file2 }}'
  register: import_result2

- name: Dump and Import | Assert output message restored a database from dump file2
  assert:
    that:
      - import_result2 is changed
      - import_result2.db_list == ['{{ db_name2 }}']

- name: Dump and Import | Run command to list databases
  command: "{{ mysql_command }} \"-e show databases like 'data%'\""
  register: mysql_result

- name: Dump and Import | Assert that db_name2 database does exist after import
  assert:
    that:
      - "'{{ db_name2 }}' in mysql_result.stdout"

- name: Dump and Import | Test state=dump to backup the database of type {{ format_type }} (expect changed=true)
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: dump
    target: '{{ db_file_name }}'
  register: result

- name: Dump and Import | Assert output message backup the database
  assert:
    that:
      - result is changed
      - "result.db =='{{ db_name }}'"

# - name: Dump and Import | Assert database was backed up successfully
#   command: "file {{ db_file_name }}"
#   register: result
#
# - name: Dump and Import | Assert file format type
#   assert:
#     that:
#       - "'{{ format_msg_type }}' in result.stdout"

- name: Dump and Import | Update database table employee
  command: "{{ mysql_command }} {{ db_name }} \"-e update employee set name='John Doe' where id=47\""

- name: Dump and Import | Test state=import to restore the database of type {{ format_type }} (expect changed=true)
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: import
    target: '{{ db_file_name }}'
  register: result

- name: Dump and Import | Assert output message restore the database
  assert:
    that:
      - result is changed

- name: Dump and Import | Select data from table employee
  command: "{{ mysql_command }} {{ db_name }} \"-e select * from  employee\""
  register: result

- name: Dump and Import | Assert data in database is from the restore database
  assert:
    that:
      - "'47' in result.stdout"
      - "'Joe Smith' in result.stdout"

##########################
# Test ``force`` parameter
##########################

- name: Dump and Import | Create wrong sql file
  shell: echo 'CREATE TABLE hello (id int); CREATE ELBAT ehlo (int id);' >> '{{ wrong_sql_file }}'

- name: Dump and Import | Try to import without force parameter, must fail
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: import
    target: '{{ wrong_sql_file }}'
    force: no
  register: result
  ignore_errors: yes

- assert:
    that:
      - result is failed

- name: Dump and Import | Try to import with force parameter
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: import
    target: '{{ wrong_sql_file }}'
    force: yes
  register: result

- assert:
    that:
      - result is changed

########################
# Test import with chdir

- name: Dump and Import | Create dir
  file:
    path: ~/subdir
    state: directory

- name: Dump and Import | Create test dump
  shell: 'echo "SOURCE ./subdir_test.sql" > ~/original_test.sql'

- name: Dump and Import | Create test source
  shell: 'echo "SELECT 1" > ~/subdir/subdir_test.sql'

- name: Dump and Import | Try to restore without chdir argument, must fail
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: import
    target: '~/original_test.sql'
  ignore_errors: yes
  register: result
- assert:
    that:
      - result is failed
      - result.msg is search('Failed to open file')

- name: Dump and Import | Restore with chdir argument, must pass
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ db_name }}'
    state: import
    target: '~/original_test.sql'
    chdir: ~/subdir
  register: result
- assert:
    that:
      - result is succeeded

##########
# Clean up
##########

- name: Dump and Import | Clean up databases
  mysql_db:
    login_user: '{{ mysql_user }}'
    login_password: '{{ mysql_password }}'
    login_host: '{{ mysql_host }}'
    login_port: '{{ mysql_primary_port }}'
    name: '{{ item }}'
    state: absent
  loop:
    - '{{ db_name }}'
    - '{{ db_name2 }}'

- name: Dump and Import | Clean up files
  file:
    name: '{{ item }}'
    state: absent
  loop:
    - '{{ db_file_name }}'
    - '{{ wrong_sql_file }}'
    - '{{ dump_file1 }}'
    - '{{ dump_file2 }}'
