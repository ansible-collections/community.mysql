---
# Tests scenarios for both plaintext and encrypted user passwords.

- vars:
    mysql_parameters:
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: '{{ mysql_host }}'
      login_port: '{{ mysql_primary_port }}'
    test_password1: kbB9tcx5WOGVGfzV
    test_password1_hash: '*AF6A7F9D038475C17EE46564F154104877EE5037'
    test_password2: XBYjpHmjIctMxl1y
    test_password2_hash: '*9E22D1B35C68BDDF398B8F28AE482E5A865BAC0A'
    test_password3: tem33JfR5Yx98BB
    test_password3_hash: '*C7E7C2710702F20336F8D93BC0670C8FB66BDBC7'


  block:
    - include_tasks: utils/assert_user_password.yml
      vars:
        username: "{{ item.username }}"
        host: "%"
        update_password: "{{ item.update_password }}"
        password: "{{ test_password1 }}"
        expect_change: "{{ item.expect_change }}"
        expect_password_change: "{{ item.expect_change }}"
        expect_password_hash: "{{ test_password1_hash }}"
      loop:
        # all variants set the password when nothing exists
        - username: test1
          update_password: always
          expect_change: true
        - username: test2
          update_password: on_create
          expect_change: true
        - username: test3
          update_password: on_new_username
          expect_change: true

        # assert idempotency
        - username: test1
          update_password: always
          expect_change: false
        - username: test2
          update_password: on_create
          expect_change: false
        - username: test3
          update_password: on_new_username
          expect_change: false

    # same user, new password
    - include_tasks: utils/assert_user_password.yml
      vars:
        username: "{{ item.username }}"
        host: "%"
        update_password: "{{ item.update_password }}"
        password: "{{ test_password2 }}"
        expect_change: "{{ item.expect_change }}"
        expect_password_change: "{{ item.expect_change }}"
        expect_password_hash: "{{ item.expect_password_hash }}"
      loop:
        - username: test1
          update_password: always
          expect_change: true
          expect_password_hash: "{{ test_password2_hash }}"
        - username: test2
          update_password: on_create
          expect_change: false
          expect_password_hash: "{{ test_password1_hash }}"
        - username: test3
          update_password: on_new_username
          expect_change: false
          expect_password_hash: "{{ test_password1_hash }}"

    # new user, new password
    - include_tasks: utils/assert_user_password.yml
      vars:
        username: "{{ item.username }}"
        host: '::1'
        update_password: "{{ item.update_password }}"
        password: "{{ item.password }}"
        expect_change: "{{ item.expect_change }}"
        expect_password_change: "{{ item.expect_password_change }}"
        expect_password_hash: "{{ item.expect_password_hash }}"
      loop:
        - username: test1
          update_password: always
          expect_change: true
          expect_password_change: true
          password: "{{ test_password1 }}"
          expect_password_hash: "{{ test_password1_hash }}"
        - username: test2
          update_password: on_create
          expect_change: true
          expect_password_change: true
          password: "{{ test_password2 }}"
          expect_password_hash: "{{ test_password2_hash }}"
        - username: test3
          update_password: on_new_username
          expect_change: true
          expect_password_change: false
          password: "{{ test_password2 }}"
          expect_password_hash: "{{ test_password1_hash }}"

        # prepare for next test: ensure all users have varying passwords
        - username: test3
          update_password: always
          expect_change: true
          expect_password_change: true
          password: "{{ test_password2 }}"
          expect_password_hash: "{{ test_password2_hash }}"

    # another new user, another new password and multiple existing users with varying passwords
    - include_tasks: utils/assert_user_password.yml
      vars:
        username: "{{ item.username }}"
        host: '2001:db8::1'
        update_password: "{{ item.update_password }}"
        password: "{{ test_password3 }}"
        expect_change: true
        expect_password_change: true
        expect_password_hash: "{{ test_password3_hash }}"
      loop:
        - username: test1
          update_password: always
        - username: test2
          update_password: on_create
        - username: test3
          update_password: on_new_username

    # another new user, another new password and multiple existing users with
    # varying passwords without providing a password
    - name: update_password | Create account with on_new_username while omit password
      community.mysql.mysql_user:
        login_user: '{{ mysql_parameters.login_user }}'
        login_password: '{{ mysql_parameters.login_password }}'
        login_host: '{{ mysql_parameters.login_host }}'
        login_port: '{{ mysql_parameters.login_port }}'
        state: present
        name: test3
        host: '10.10.10.10'
        update_password: on_new_username

    - name: update_password | Assert create account with on_new_username while omit password produce empty auth string
      ansible.builtin.command: >-
        {{ mysql_command }} -BNe "SELECT user, host, plugin, authentication_string
        FROM mysql.user where user='test3' and host='10.10.10.10'"
      register: test3_info
      changed_when: false
      failed_when:
        # MariaDB default plugin is mysql_native_password
        - "'test3\t10.10.10.10\tmysql_native_password\t' != test3_info.stdout"

        # MySQL 8+ default plugin is caching_sha2_password
        - "'test3\t10.10.10.10\tcaching_sha2_password\t' != test3_info.stdout"
